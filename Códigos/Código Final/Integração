#include <msp430g2553.h>
#include <legacymsp430.h>

#define IN_AD BIT1
#define IN_AD_CH INCH_2


#define LEDS (LED2)
#define LED1 BIT0

#define SERVO1 BIT6
#define SERVO2 BIT5
#define PERIODO 20000
#define MIN_T  600
#define MAX_T 2200
#define STEP_T  500
#define MOVE_D init_servo_H(600)
#define MOVE_C init_servo_H(2200)
#define MOVE_B init_servo_V(600)
#define MOVE_A init_servo_V(2200)
#define sensibilidade 50


int main(void)
{
    WDTCTL = WDTPW + WDTHOLD; 
//Configurando o clk para 1Mhz
    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1DIR |= LED1;                            // P1.0 as output for LED
    P1OUT &= ~LED1;
    const int CH_AD[4] = {INCH_1, INCH_2, INCH_3, INCH_4};
    const int pin_AD[4] = {BIT1, BIT2, BIT3, BIT4};
    int LDR[4] = {0,0,0,0};
    int contador_AD = 0;
    int LigarMotores = 0;
    void init_servo_V(int PERIODO_1);
    void init_servo_H(int PERIODO_2);
    void init_AD(int CH_AD, int BIT_AD);
    int media(int contador, int num);
    init_servo_V(1400);
    init_servo_H(1400);
    while(1)
    {
        init_AD(CH_AD[contador_AD], pin_AD[contador_AD]);
        // Manda comecar uma conversao
        ADC10CTL0 |= ENC + ADC10SC;
        // Espera a conversao ficar pronta
        while((ADC10CTL0 & ADC10IFG)==0);

        // Acende ou apaga o LED1
        // de acordo com a conversao AD
        LDR[contador_AD] = ADC10MEM;

        // Inverte o LED2 para vermos
        // a temporizacao deste loop



        contador_AD++;
        if(contador_AD == 1)
            contador_AD++;
        if(contador_AD == 4)
        {
            if(LigarMotores == 0)
                LigarMotores =1;
            else
                LigarMotores = 0;
            contador_AD = 0;

        }

        if(LigarMotores == 1)
        {
            if(    ((LDR[0]-LDR[2])>sensibilidade)  && ((LDR[0]-LDR[3])>sensibilidade) )
                MOVE_A;
            else if(    ((LDR[2]-LDR[0])>sensibilidade) && ((LDR[2]-LDR[3])>sensibilidade) )
                MOVE_B;
            else if( ((LDR[3]-LDR[0])>sensibilidade) && ((LDR[3]-LDR[2])>sensibilidade) )
            {MOVE_C;
            MOVE_B;
            }
            if((LDR[0]-LDR[3])>sensibilidade)
                MOVE_C;
           else
               MOVE_D;

        }
__delay_cycles(10000);
    }

}


void init_AD(int CH_AD, int BIT_AD){

    ADC10CTL0 = SREF_0 + ADC10SHT_0 + ADC10ON;
    ADC10AE0 = BIT_AD;
    // Com SHS_0, uma conversao sera requisitada
    // sempre que o bit ADC10SC for setado em ADC10CTL0
    ADC10CTL1 = CH_AD + ADC10DIV_0 + ADC10SSEL_3 + CONSEQ_0 + SHS_0;


}

void init_servo_V(int PERIODO_1 ){
    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1DIR |= SERVO1;
    P1SEL |= SERVO1;
    P1SEL2 &= ~SERVO1;
    TA0CCR0 = PERIODO-1;
    TA0CCR1 = PERIODO_1;
    TA0CCTL1 = OUTMOD_7;
    TA0CTL = (TASSEL_2 + MC_1);
}



void init_servo_H(int PERIODO_2){

    BCSCTL1   = CALBC1_1MHZ;       // Set DCO range
    DCOCTL    = CALDCO_1MHZ;       // Set DCO step and modulation

    P2DIR  |=  0x02; // Set P2.1 to output-direction
    P2SEL  |=  0x02; // Set selection register 1 for timer-function
    P2SEL2 &= ~0x02; // Clear selection register 2 for timer-function (not needed, as it is 0 after startup)



    TA1CCTL1 = OUTMOD_7;          // Reset/set
    TA1CCR0  = PERIODO-1;           // Period
    TA1CCR1  = PERIODO_2;              // Duty-cycle
    TA1CTL   = (TASSEL_2 | MC_1); // SMCLK, timer in up-mode


}
int media(int contador, int num){

   static int media_movel[4][3];
   static int count_media;
   media_movel[contador][count_media] = num;
   if(contador ==3)
       count_media++;
   if(count_media == 4)
       count_media = 0;
   return  ((media_movel[contador][0]+media_movel[contador][1]+media_movel[contador][2])/3 );
}
